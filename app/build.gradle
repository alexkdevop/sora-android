apply plugin: 'com.android.application'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'com.google.firebase.crashlytics'
apply from: '../tests.gradle'

android {
    compileSdkVersion compileVersion
    flavorDimensions "default"
    defaultConfig {
        applicationId "jp.co.soramitsu.sora"
        minSdkVersion minVersion
        targetSdkVersion targetVersion
        versionCode appVersionCode
        versionName appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    signingConfigs {
        cidebug {
            storeFile file(System.env.CI_KEYSTORE_PATH ?: "key.jks")
            storePassword System.env.CI_KEYSTORE_PASS ?: "password"
            keyAlias System.env.CI_KEYSTORE_KEY_ALIAS ?: "alias"
            keyPassword System.env.CI_KEYSTORE_KEY_PASS ?: "password"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            //shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-noobfuscation.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-noobfuscation.pro'
            versionNameSuffix '-debug'
        }
        firebasedebug {
//            minifyEnabled true
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            initWith debug
            matchingFallbacks = ['debug']
            versionNameSuffix '-firebase'
            signingConfig signingConfigs.cidebug
            //Init firebase
            def firebaseReleaseNotes = ''
            def firebaseGroup = ''
            if (System.getenv('CI_FIREBASE_RELEASENOTES') != null) {
                firebaseReleaseNotes = System.env.CI_FIREBASE_RELEASENOTES
            }
            if (System.getenv('CI_FIREBASE_GROUP') != null) {
                firebaseGroup = System.env.CI_FIREBASE_GROUP
            }
            firebaseAppDistribution {
                releaseNotes = firebaseReleaseNotes
                groups = firebaseGroup
            }

        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/AL2.0', 'META-INF/LGPL2.1', 'META-INF/INDEX.LIST', 'META-INF/io.netty.versions.properties']
        }
    }


    productFlavors {
        develop {
            applicationIdSuffix ".develop"
            resValue "string", "app_name", "Sora Develop"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/dev/join"
            manifestPlaceholders.appIcon = "@mipmap/ic_dev_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_dev_launcher"
        }

        soralution {
            applicationIdSuffix ".communitytesting"
            resValue "string", "app_name", "Soralution"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/tst/join"
            manifestPlaceholders.appIcon = "@mipmap/ic_soralution_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_soralution_launcher_rounded"
        }

        tsting {
            applicationIdSuffix ".stage"
            resValue "string", "app_name", "Sora Staging"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/stg/join"
            manifestPlaceholders.appIcon = "@mipmap/ic_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_launcher_rounded"
        }

        production {
            resValue "string", "app_name", "Sora"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/join"
            manifestPlaceholders.appIcon = "@mipmap/ic_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_launcher_rounded"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File("Sora_" + variant.versionName + "_" + variant.flavorName + "_" + buildType.name + ".apk")
        }
    }
}

hilt {
    enableAggregatingTask = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":common")
    implementation project(":core_db")
    implementation project(":feature_onboarding_api")
    implementation project(":feature_onboarding_impl")
    implementation project(":feature_main_api")
    implementation project(":feature_main_impl")
    implementation project(":feature_multiaccount_api")
    implementation project(":feature_multiaccount_impl")
    implementation project(":feature_referral_api")
    implementation project(":feature_referral_impl")
    implementation project(":feature_account_api")
    implementation project(":feature_account_impl")
    implementation project(":feature_ethereum_api")
    implementation project(":feature_ethereum_impl")
    implementation project(":feature_votable_api")
    implementation project(":feature_votable_impl")
    implementation project(":feature_wallet_api")
    implementation project(":feature_wallet_impl")
    implementation project(":feature_notification_api")
    implementation project(":feature_notification_impl")
    implementation project(":sorasubstrate")
    implementation project(":soracrypro")

    implementation kotlinDep

    implementation androidDep
    implementation materialDep
    implementation cardViewDep
    implementation constraintDep

    implementation navigationFragmentDep
    implementation navigationUiDep

    implementation neumorphismDep
    implementation emojiDep

    implementation lottieDep

    implementation timberDep

    implementation daggerDep
    kapt daggerKaptDep
    implementation hiltWorkManagerDep
    kapt hiltWorkManagerKaptDep

    implementation lifecycleProcessDep
    kapt lifecycleKaptDep

    implementation coroutineAndroidDep
    implementation coroutineDep

    implementation platform(firebaseBomDep)
    implementation crashlyticsDep

    implementation multidexDep

    implementation xNetworkingDep
    implementation webSocketLibDep

    implementation zXingCoreDep
    implementation zXingEmbeddedDep

    implementation gsonDep
    
    // Tests
    testImplementation project(":test_shared")
}

kapt {
    correctErrorTypes true
}

apply plugin: 'com.google.gms.google-services'
